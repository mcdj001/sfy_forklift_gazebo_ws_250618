#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
# AGV
grp_agv = gen.add_group("AGV", type="tab")

grp_agv.add("expected_vel_x", double_t, 0,
              "Expected velocity in the x direction of the robot",
              1, 0.01, 100)

grp_agv.add("max_vel_x", double_t, 0,
              "Maximum velocity in the x direction of the robot",
              5, 0.01, 100)

grp_agv.add("max_vel_x_backwards", double_t, 0,
              "Maximum translational velocity of the robot for driving backwards",
              0.2, 0.01, 100)

grp_agv.add("max_vel_theta", double_t, 0,
              "Maximum angular velocity of the robot",
              0.5, 0.01, 100)

grp_agv.add("acc_lim_x", double_t, 0,
              "Maximum translational acceleration of the robot",
              0.2, 0.01, 100)

grp_agv.add("acc_lim_theta", double_t, 0,
              "Maximum angular acceleration of the robot",
              0.2, 0.01, 100)

grp_agv.add("min_turn_radius", double_t, 0,
              "Minimum turning radius of the robot",
              0.0, 0.0, 100)

grp_agv.add("turn_around_priority", bool_t, 0,
              "If true, the robot preferentially adjusts the orientation to fit the direction of the path",
              True)

grp_agv.add("stop_dist", double_t, 0,
              "When the Euclidean distance between the nearest lethal point on planned path and the robot frame origin is less than this distance, the robot stops",
              0.5, 0.01, 100)

grp_agv.add("dec_dist", double_t, 0,
              "When the Euclidean distance between the nearest lethal point on planned path and the robot frame origin is less than this distance, the robot slows down",
              1.0, 0.01, 100)

grp_agv.add("forklift_wheelbase",double_t, 0,
              "The distance between the front and rear wheels of the forklift",
              2.0, 1.00, 100)

grp_agv.add("pp_view_distance" , double_t, 0, 
              "pp algorithm past life distance",
              5.0, 0.1, 100)

grp_agv.add("pp_view_distance_ratio" , double_t, 0, 
              "pp algorithm past life distance ratio",
              1.0, 0.1, 100) 

grp_agv.add("slow_level1_distance" , double_t, 0, 
               "",
               1.0, 0.0, 100)       

grp_agv.add("slow_level1_vel" , double_t, 0, 
               "",
               1.0, 0.0, 100)     


# GoalTolerance
grp_goal = gen.add_group("GoalTolerance", type="tab")

grp_goal.add("xy_goal_tolerance", double_t, 0,
             "Allowed final euclidean distance to the goal position",
             0.2, 0.001, 10)

grp_goal.add("yaw_goal_tolerance", double_t, 0,
             "Allowed final orientation error to the goal orientation",
             0.1, 0.001, 3.2)

grp_trajectory = gen.add_group("Trajectory", type="tab")

# Trajectory
grp_trajectory.add("max_global_plan_lookahead_dist",   double_t,   0,
                   "Specify maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization [if 0 or negative: disabled; the length is also bounded by the local costmap size]",
                   3.0, 0, 50.0)

grp_trajectory.add("global_plan_viapoint_sep",   double_t,   0,
                   "Min. separation between each two consecutive via-points extracted from the global plan [if negative: disabled]",
                   0.5, -0.1, 10.0)

grp_trajectory.add("global_plan_goal_sep",   double_t,   0,
                   "Min. separation between last via-points extracted from the global plan and goal",
                   0.8, -0.1, 10.0)

grp_trajectory.add("global_plan_prune_distance",   double_t,   0,
                   "Distance between robot and via_points of global plan which is used for pruning",
                   0.2, -0.1, 10.0)
                   
# Optimization
grp_optimization = gen.add_group("Optimization", type="tab")

grp_optimization.add("k_rho",    double_t,    0,
                     "Proportional parameter for linear velocity adjustment based on the Euclidean distance of the robot position to the current target",
                     1.0, 0.0, 10.0)

grp_optimization.add("k_alpha",    double_t,    0,
                     "Proportional parameter for angular velocity adjustment based on the tangential angle of the target position in the robot's frame of reference",
                     -3.0, -10.0, 10.0)

grp_optimization.add("k_phi",    double_t,    0,
                     "Proportional parameter for angular velocity adjustment based on the difference between the robot's orientation(yaw) and the current target orientation(yaw)",
                     -1.0, -10.0, 10.0)

grp_optimization.add("pp_front_k_p",    double_t,    0,
                     "Nothing",
                     0.0, -100.0, 100.0)

grp_optimization.add("pp_front_k_i",    double_t,    0,
                     "Nothing",
                     0.0, -100.0, 100.0)

grp_optimization.add("pp_front_k_d",    double_t,    0,
                     "Nothing",
                     0.0, -100.0, 100.0)

grp_optimization.add("pp_rear_k_p",    double_t,    0,
                    "Nothing",
                     0.0, -100.0, 100.0)

grp_optimization.add("pp_rear_k_i",    double_t,    0,
                     "Nothing",
                     0.01, -100.0, 100.0)

grp_optimization.add("pp_rear_k_d",    double_t,    0,
                    "Nothing",
                     0.0, -100.0, 100.0)

grp_optimization.add("pid_front_k_p",    double_t,    0,
                     "Nothing",
                     0.0, -100.0, 100.0)

grp_optimization.add("pid_front_k_i",    double_t,    0,
                     "Nothing",
                     0.01, -100.0, 100.0)

grp_optimization.add("pid_front_k_d",    double_t,    0,
                    "Nothing",
                     0.0, -100.0, 100.0)

grp_optimization.add("pid_rear_k_p",    double_t,    0,
                     "Nothing",
                     0.0, -100.0, 100.0)

grp_optimization.add("pid_rear_k_i",    double_t,    0,
                     "Nothing",
                     0.01, -100.0, 100.0)

grp_optimization.add("pid_rear_k_d",    double_t,    0,
                    "Nothing",
                     0.0, -100.0, 100.0)

# ForkliftChose
grp_forklift_chose = gen.add_group("ForkliftChose", type="tab")

grp_forklift_chose.add("control_model" , str_t, 0, 
                    "The control model of the forklift",
                    "pp")

grp_forklift_chose.add("steer_vel_delay_pid_model", bool_t, 0,
                    "If true, ",
                    True)

grp_forklift_chose.add("debug_model", bool_t, 0,
                    "If true, ",
                    False)

grp_forklift_chose.add("fuzzy_ld_model", bool_t, 0,
                    "If true, ",
                    True)

grp_forklift_chose.add("use_forklift_odom_combined", bool_t, 0,
                    "If true, ",
                    False)


grp_lqr = gen.add_group("LQR", type="tab")

grp_lqr.add("lqr_dynamic_q1",    double_t,    0,
               "Nothing",
               0.0, -100.0, 100.0)

grp_lqr.add("lqr_dynamic_q2",    double_t,    0,
               "Nothing",
               0.0, -100.0, 100.0)
grp_lqr.add("lqr_dynamic_q3",    double_t,    0,
               "Nothing",
               0.0, -100.0, 100.0)
grp_lqr.add("lqr_dynamic_q4",    double_t,    0,
               "Nothing",
               0.0, -100.0, 100.0)
grp_lqr.add("lqr_dynamic_r1",    double_t,    0,
               "Nothing",
               0.0, -100.0, 150.0)
grp_lqr.add("lqr_kinematic_q1",    double_t,    0,
               "Nothing",
               0.0, -100.0, 100.0)
grp_lqr.add("lqr_kinematic_q2",    double_t,    0,
               "Nothing",
               0.0, -100.0, 100.0)
grp_lqr.add("lqr_kinematic_q3",    double_t,    0,
               "Nothing",
               0.0, -100.0, 100.0)
grp_lqr.add("lqr_kinematic_r1",    double_t,    0,
               "Nothing",
               0.0, -100.0, 150.0)
grp_lqr.add("lqr_kinematic_r2",    double_t,    0,
               "Nothing",
               0.0, -100.0, 150.0)
grp_lqr.add("lf",    double_t,    0,
               "Nothing",
               0.01, 0, 1.0)
grp_lqr.add("cf",    double_t,    0,
               "Nothing",
               0.01, 0, 1.0)
grp_lqr.add("cr",    double_t,    0,
               "Nothing",
               0.01, 0, 1.0)
grp_lqr.add("mass",    double_t,    0,
               "Nothing",
               0.0, 0, 5000.0)
grp_lqr.add("horizon",    double_t,    0,
               "Nothing",
               0.0, 0, 1000.0)

               
exit(gen.generate("sfy_forklift_local_planner",
     "sfy_forklift_local_planner", "SfyForkliftLocalPlannerReconfigure"))

